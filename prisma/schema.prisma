generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String        @id @default(cuid())
  name                String?
  email               String        @unique
  password            String
  emailVerified       Boolean       @default(false)
  completedOnboarding Boolean       @default(false)
  verificationToken   String?
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  portfolio           Portfolio?
  transactions        Transaction[]
  deposits            Deposit[]
  withdrawals         Withdrawal[]
  session             Session[]
}

model Asset {
  id                String             @id @default(cuid())
  symbol            String             @unique
  name              String
  decimals          Int                @default(8)
  basePairs         TradingPair[]      @relation("BasePair")
  quotePairs        TradingPair[]      @relation("QuotePair")
  portfolioHoldings PortfolioHolding[]
  deposits          Deposit[]
  withdrawals       Withdrawal[]
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
}

model TradingPair {
  id              String            @id @default(cuid())
  baseId          String
  quoteId         String
  base            Asset             @relation("BasePair", fields: [baseId], references: [id])
  quote           Asset             @relation("QuotePair", fields: [quoteId], references: [id])
  transactions    Transaction[]
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  HistoricalPrice HistoricalPrice[]
  LivePrice       LivePrice?

  @@unique([baseId, quoteId])
  @@index([baseId])
  @@index([quoteId])
}

model Portfolio {
  id        String             @id @default(cuid())
  userId    String             @unique
  user      User               @relation(fields: [userId], references: [id])
  holdings  PortfolioHolding[]
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model PortfolioHolding {
  id           String    @id @default(cuid())
  portfolioId  String
  portfolio    Portfolio @relation(fields: [portfolioId], references: [id])
  assetId      String
  asset        Asset     @relation(fields: [assetId], references: [id])
  balance      Float
  averagePrice Float     @default(0)
  totalCost    Float     @default(0)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  @@unique([portfolioId, assetId])
  @@index([portfolioId])
  @@index([assetId])
}

model Transaction {
  id         String      @id @default(cuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id])
  pairId     String
  pair       TradingPair @relation(fields: [pairId], references: [id])
  type       String // BUY or SELL
  price      Float
  amount     Float
  total      Float
  commission Float       @default(0)
  date       DateTime
  notes      String?     @db.Text
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([userId])
  @@index([pairId])
}

model Deposit {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  assetId    String
  asset      Asset    @relation(fields: [assetId], references: [id])
  amount     Float
  commission Float    @default(0)
  date       DateTime
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([assetId])
}

model Withdrawal {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  assetId    String
  asset      Asset    @relation(fields: [assetId], references: [id])
  amount     Float
  commission Float    @default(0)
  date       DateTime
  notes      String?  @db.Text
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([assetId])
}

model HistoricalPrice {
  id        String      @id @default(uuid())
  pairId    String
  pair      TradingPair @relation(fields: [pairId], references: [id])
  timestamp DateTime    @default(now())
  open      Decimal
  high      Decimal
  low       Decimal
  close     Decimal
  volume    Decimal
}

model LivePrice {
  id        String      @id @default(uuid())
  pairId    String      @unique
  pair      TradingPair @relation(fields: [pairId], references: [id])
  price     Decimal
  updatedAt DateTime    @updatedAt
}

model PgSession {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}
