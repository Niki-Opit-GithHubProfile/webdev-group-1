generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  passwordHash String?
  emailVerified Boolean @default(false)
  verificationToken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  portfolio Portfolio?
  transactions Transaction[]
  sessions Session[]
}

model Asset {
  id      String  @id @default(uuid())
  symbol  String  @unique
  name    String
  basePairs TradingPair[] @relation("BaseAsset")
  quotePairs TradingPair[] @relation("QuoteAsset")
  portfolioHoldings PortfolioHolding[]
}

model TradingPair {
  id        String  @id @default(uuid())
  baseId    String  @map("base_asset")
  quoteId   String  @map("quote_asset")
  // Add names to relations:
  base      Asset   @relation("BaseAsset", fields: [baseId], references: [id])
  quote     Asset   @relation("QuoteAsset", fields: [quoteId], references: [id])
  transactions Transaction[]
  historicalPrices HistoricalPrice[]
  livePrice       LivePrice?
  
  @@unique([baseId, quoteId])
}

model Transaction {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id])
  pairId      String
  pair        TradingPair  @relation(fields: [pairId], references: [id])
  type        TransactionType
  price       Decimal
  amount      Decimal
  total       Decimal
  createdAt   DateTime     @default(now())
}

enum TransactionType {
  BUY
  SELL
}

model Portfolio {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id])
  holdings  PortfolioHolding[]
}

model PortfolioHolding {
  id        String  @id @default(uuid())
  portfolioId String
  assetId   String
  balance   Decimal
  portfolio Portfolio @relation(fields: [portfolioId], references: [id])
  asset     Asset     @relation(fields: [assetId], references: [id])
  
  @@unique([portfolioId, assetId])
}

model HistoricalPrice {
  id        String      @id @default(uuid())
  pairId    String
  pair      TradingPair @relation(fields: [pairId], references: [id])
  timestamp DateTime    @default(now())
  open      Decimal
  high      Decimal
  low       Decimal
  close     Decimal
  volume    Decimal
}

model LivePrice {
  id        String      @id @default(uuid())
  pairId    String      @unique
  pair      TradingPair @relation(fields: [pairId], references: [id])
  price     Decimal
  updatedAt DateTime    @updatedAt
}

model PgSession {
  sid    String   @id @db.VarChar
  sess   Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model Session {
  id        String   @id @default(uuid())
  userId    String
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id])
}
