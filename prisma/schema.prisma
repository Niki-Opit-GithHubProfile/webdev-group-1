// This is your Prisma schema file
// Learn more at: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // This loads the value from the .env file
}

model User {
  id            Int      @id @default(autoincrement())
  email         String   @unique
  passwordHash  String   @default("default_hash") // Temporary default value
  oauthProvider String?
  oauthId       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  transactions Transaction[]
  assets       Asset[]
  sessions     Session[]
  oauthTokens  OAuthToken[]
}

model Transaction {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  transactionType String // buy or sell
  assetName       String // BTC, ETH, etc.
  quantity        Float
  price           Float
  totalValue      Float
  transactionDate DateTime @default(now())
  sourceAsset     String? // If a trade, this is the source asset
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Asset {
  id              Int      @id @default(autoincrement())
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  assetName       String // BTC, ETH, etc.
  quantity        Float
  averageBuyPrice Float
  totalValue      Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model PriceHistory {
  id        Int      @id @default(autoincrement())
  assetName String // BTC, ETH, etc.
  price     Float
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime
}

model OAuthToken {
  id                Int      @id @default(autoincrement())
  userId            Int
  user              User     @relation(fields: [userId], references: [id])
  provider          String // Google or GitHub
  oauthToken        String
  oauthRefreshToken String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}
