<%- include('../components/header') %>

<div class="container mx-auto px-4 mt-8">
  <div class="max-w-3xl mx-auto">
    <div class="bg-gray-800 rounded-lg shadow-lg overflow-hidden">
      <div class="bg-blue-600 px-6 py-4">
        <h3 class="text-xl font-bold text-white mb-0">Your Existing Assets</h3>
      </div>
      
      <div class="p-6">
        <div class="mb-6">
          <p class="text-gray-300 mb-2">Please add the cryptocurrencies you currently own.</p>
          <p class="text-gray-400 text-sm">This information will be used to set up your portfolio and track your performance.</p>
        </div>
        
        <form id="initialAssetsForm" method="POST" action="/onboarding/initial-assets">
          <input type="hidden" name="_csrf" value="<%= csrfToken %>">
          
          <div id="assetEntries" class="space-y-4 mb-6">
            <!-- Initial asset entry -->
            <div class="asset-entry bg-gray-700 p-4 rounded-lg">
              <div class="flex justify-between items-center mb-3">
                <h4 class="font-medium">Asset #1</h4>
                <button type="button" class="remove-entry text-red-400 hover:text-red-300" style="display: none;">
                  <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
                  </svg>
                </button>
              </div>
              
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label class="block text-sm font-medium mb-1">Cryptocurrency</label>
                  <select 
                    name="assets[0][assetId]" 
                    class="w-full bg-gray-900 border border-gray-700 rounded py-2 px-3 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                    <option value="">Select a cryptocurrency</option>
                    <% assets.forEach(asset => { %>
                      <option value="<%= asset.id %>"><%= asset.name %> (<%= asset.symbol %>)</option>
                    <% }); %>
                  </select>
                </div>
                
                <div>
                  <label class="block text-sm font-medium mb-1">Amount Owned</label>
                  <input 
                    type="number" 
                    name="assets[0][amount]" 
                    step="any" 
                    min="0.00000001"
                    placeholder="0.00" 
                    class="w-full bg-gray-900 border border-gray-700 rounded py-2 px-3 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
                    required
                  >
                </div>
              </div>
            </div>
          </div>
          
          <div class="flex justify-center mb-6">
            <button 
              type="button" 
              id="addMoreAssets"
              class="flex items-center bg-gray-700 hover:bg-gray-600 text-white text-sm font-medium py-2 px-4 rounded transition"
            >
              <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 mr-2" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
              </svg>
              Add Another Asset
            </button>
          </div>
          
          <div class="flex space-x-3">
            <button 
              type="button" 
              id="skipInitialAssets"
              class="w-1/3 bg-gray-700 hover:bg-gray-600 text-white font-medium py-2 px-4 rounded transition"
            >
              Skip
            </button>
            
            <button 
              type="submit"
              class="w-2/3 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2 px-4 rounded transition"
            >
              Complete Setup
            </button>
          </div>
        </form>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const assetEntriesContainer = document.getElementById('assetEntries');
    const addMoreButton = document.getElementById('addMoreAssets');
    const skipButton = document.getElementById('skipInitialAssets');
    const form = document.getElementById('initialAssetsForm');
    let entryCount = 1;
    
    // Function to add new asset entry
    addMoreButton.addEventListener('click', () => {
      entryCount++;
      
      const newEntry = document.createElement('div');
      newEntry.className = 'asset-entry bg-gray-700 p-4 rounded-lg';
      newEntry.innerHTML = `
        <div class="flex justify-between items-center mb-3">
          <h4 class="font-medium">Asset #${entryCount}</h4>
          <button type="button" class="remove-entry text-red-400 hover:text-red-300">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M9 2a1 1 0 00-.894.553L7.382 4H4a1 1 0 000 2v10a2 2 0 002 2h8a2 2 0 002-2V6a1 1 0 100-2h-3.382l-.724-1.447A1 1 0 0011 2H9zM7 8a1 1 0 012 0v6a1 1 0 11-2 0V8zm5-1a1 1 0 00-1 1v6a1 1 0 102 0V8a1 1 0 00-1-1z" clip-rule="evenodd" />
            </svg>
          </button>
        </div>
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div>
            <label class="block text-sm font-medium mb-1">Cryptocurrency</label>
            <select 
              name="assets[${entryCount-1}][assetId]" 
              class="w-full bg-gray-900 border border-gray-700 rounded py-2 px-3 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
              <option value="">Select a cryptocurrency</option>
              ${Array.from(document.querySelectorAll('select[name^="assets"] option'))
                .filter(option => option.value) // Skip the first empty option
                .map(option => 
                  `<option value="${option.value}">${option.textContent}</option>`
                )
                .join('')
              }
            </select>
          </div>
          
          <div>
            <label class="block text-sm font-medium mb-1">Amount Owned</label>
            <input 
              type="number" 
              name="assets[${entryCount-1}][amount]" 
              step="any" 
              min="0.00000001"
              placeholder="0.00" 
              class="w-full bg-gray-900 border border-gray-700 rounded py-2 px-3 text-sm focus:outline-none focus:ring-2 focus:ring-blue-500"
              required
            >
          </div>
        </div>
      `;
      
      assetEntriesContainer.appendChild(newEntry);
      
      // Show all remove buttons when there's more than one entry
      if (entryCount > 1) {
        document.querySelectorAll('.remove-entry').forEach(btn => {
          btn.style.display = 'block';
        });
      }
    });
    
    // Event delegation for remove buttons
    assetEntriesContainer.addEventListener('click', (e) => {
      const removeButton = e.target.closest('.remove-entry');
      if (removeButton) {
        const entry = removeButton.closest('.asset-entry');
        entry.remove();
        
        // Reindex the form fields and update labels
        reindexFormFields();
        
        // Hide remove buttons if only one entry left
        if (entryCount === 1) {
          document.querySelectorAll('.remove-entry').forEach(btn => {
            btn.style.display = 'none';
          });
        }
      }
    });
    
    // Reindex form fields after removing entries
    function reindexFormFields() {
      const entries = assetEntriesContainer.querySelectorAll('.asset-entry');
      entries.forEach((entry, index) => {
        // Update title
        entry.querySelector('h4').textContent = `Asset #${index + 1}`;
        
        // Update field names
        entry.querySelector('select').name = `assets[${index}][assetId]`;
        entry.querySelector('input[type="number"]').name = `assets[${index}][amount]`;
      });
      entryCount = entries.length;
    }
    
    // Skip button - mark onboarding as complete with an empty portfolio
    skipButton.addEventListener('click', async () => {
      try {
        const response = await fetch('/onboarding', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'CSRF-Token': '<%= csrfToken %>'
          },
          body: JSON.stringify({ investorType: 'new' })
        });
        
        if (response.ok) {
          window.location.href = '/dashboard';
        } else {
          const data = await response.json();
          alert(data.message || 'An error occurred. Please try again.');
        }
      } catch (error) {
        console.error('Error skipping initial assets:', error);
        alert('An unexpected error occurred. Please try again.');
      }
    });
    
    // Form validation before submission
    form.addEventListener('submit', (e) => {
      // Remove any existing error messages
      document.querySelectorAll('.text-red-500').forEach(el => el.remove());
      
      // Check if we have at least one valid entry
      let validEntries = 0;
      
      assetEntriesContainer.querySelectorAll('.asset-entry').forEach(entry => {
        const assetSelect = entry.querySelector('select');
        const amountInput = entry.querySelector('input[type="number"]');
        
        if (assetSelect.value && amountInput.value && parseFloat(amountInput.value) > 0) {
          validEntries++;
        }
      });
      
      if (validEntries === 0) {
        e.preventDefault();
        
        // Show error message
        const errorMessage = document.createElement('p');
        errorMessage.className = 'text-red-500 text-sm mt-2 mb-4';
        errorMessage.textContent = 'Please add at least one valid cryptocurrency holding, or click "Skip"';
        form.insertBefore(errorMessage, form.querySelector('.flex.space-x-3'));
      }
    });
  });
</script>

